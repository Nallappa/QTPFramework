/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘APITest1.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity14 = null;
        public BindDirection bind_dir14 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity14_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity15 = null;
        public BindDirection bind_dir15 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity15_Policy = null;
        public BindDirection bind_dir16 = null;
        public BindDirection bind_dir17 = null;
        public BindDirection bind_dir18 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.DataFetchActivity7 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity7");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity9 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity9");
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterCloseActivity13 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity13");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity8 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity8");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            this.DataCursorActivity14 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity14");
            this.DataCursorActivity14_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity15 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity15");
            this.DataCursorActivity15_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence6");
            _flow.SubtractActivity5 = new HP.ST.Ext.BasicActivities.SubtractActivity(_context,"SubtractActivity5");
            _flow.AddActivity4 = new HP.ST.Ext.BasicActivities.AddActivity(_context,"AddActivity4");
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>84c6b46e-5d46-4af9-ab19-b30f068a7cb1</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Add4_Checkpoints_1!MainDetails</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Add4_Checkpoints_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Add4_Checkpoints_1!MainDetails.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>MainDetails$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Add4_Checkpoints_1!MainDetails", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.DataFetchActivity7.Comment = @"";
            _flow.DataFetchActivity7.IconPath = @"";
            _flow.DataFetchActivity7.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity7.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity7_QueryParameters_Document = new XmlDocument();
            DataFetchActivity7_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity7Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>ad436312-f9b6-4e7c-bedf-775f6f25647c</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Add4_Input_1!MainDetails</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Add4_Input_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Add4_Input_1!MainDetails.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>MainDetails$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity7_QueryParameters_Document.LoadXml(xmlDataFetchActivity7Params);
            _flow.DataFetchActivity7.QueryParameters = DataFetchActivity7_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Add4_Input_1!MainDetails", _flow.DataFetchActivity7);
            this.Activities.Add (_flow.DataFetchActivity7);
            XmlDocument StartActivity1_ExecutionInputParameters_Document = new XmlDocument();
            StartActivity1_ExecutionInputParameters_Document.PreserveWhitespace = true;
            StartActivity1_ExecutionInputParameters_Document.LoadXml(
@"<Arguments><Param1>90</Param1><Param2>10</Param2></Arguments>");
            _flow.StartActivity1.ExecutionInputParameters = StartActivity1_ExecutionInputParameters_Document;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.Add4_Input_1!MainDetails}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity14.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity14);
            _flow.Loop2.Activities.Add (this.DataCursorActivity15);
            _flow.Loop2.Activities.Add (_flow.Sequence6);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity9.Comment = @"";
            _flow.DataExporterActivity9.IconPath = @"";
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter10 = new VTDObjectSetter(pi20);
            binding_setter10 = new StringFormaterDecorator(binding_setter10,"{Step.DataFetchActivity7.OutTable}");
            bind_dir10 = new BindDirection(_flow.DataFetchActivity7,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.DataExporterActivity9.InDirections.Add(bind_dir10);
            this.Activities.Add (_flow.DataExporterActivity9);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter11 = new VTDObjectSetter(pi22);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{Step.DataFetchActivity10.OutTable}");
            bind_dir11 = new BindDirection(_flow.DataFetchActivity10,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir11);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterCloseActivity13.Comment = @"";
            _flow.DataExporterCloseActivity13.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity13);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity8.Comment = @"";
            _flow.DataDisconnectActivity8.IconPath = @"";
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter12 = new VTDObjectSetter(pi24);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{Step.DataFetchActivity7.OutTable}");
            bind_dir12 = new BindDirection(_flow.DataFetchActivity7,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity8.InDirections.Add(bind_dir12);
            this.Activities.Add (_flow.DataDisconnectActivity8);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi25);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter13 = new VTDObjectSetter(pi26);
            binding_setter13 = new StringFormaterDecorator(binding_setter13,"{Step.DataFetchActivity10.OutTable}");
            bind_dir13 = new BindDirection(_flow.DataFetchActivity10,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir13);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            this.DataCursorActivity14.Comment = @"";
            this.DataCursorActivity14.IconPath = @"";
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter14 = new VTDObjectSetter(pi28);
            binding_setter14 = new StringFormaterDecorator(binding_setter14,"{Step.DataFetchActivity7.OutTable}");
            bind_dir14 = new BindDirection(_flow.DataFetchActivity7,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            this.DataCursorActivity14.InDirections.Add(bind_dir14);
            this.DataCursorActivity14_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity14_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.StartCondition.Value = "";
            this.DataCursorActivity14_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity14_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.EndCondition.Value = "";
            this.DataCursorActivity14_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity14_Policy.StepSize = 1;
            this.DataCursorActivity14_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity14.Policy = this.DataCursorActivity14_Policy;
            this.DataCursorActivity14.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity14.ResetCursor;
            this.DataCursorActivity15.Comment = @"";
            this.DataCursorActivity15.IconPath = @"";
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter15 = new VTDObjectGetter(pi29);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter15 = new VTDObjectSetter(pi30);
            binding_setter15 = new StringFormaterDecorator(binding_setter15,"{Step.DataFetchActivity10.OutTable}");
            bind_dir15 = new BindDirection(_flow.DataFetchActivity10,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            this.DataCursorActivity15.InDirections.Add(bind_dir15);
            this.DataCursorActivity15_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity15_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity15_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity15_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity15_Policy.StartCondition.Value = "";
            this.DataCursorActivity15_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity15_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity15_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity15_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity15_Policy.EndCondition.Value = "";
            this.DataCursorActivity15_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity15_Policy.StepSize = 1;
            this.DataCursorActivity15_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity15.Policy = this.DataCursorActivity15_Policy;
            this.DataCursorActivity15.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity15.ResetCursor;
            _flow.Sequence6.Comment = @"";
            _flow.Sequence6.IconPath = @"";
            _flow.Sequence6.Name = @"Sequence6";
            _flow.Sequence6.Activities.Add (_flow.SubtractActivity5);
            _flow.Sequence6.Activities.Add (_flow.AddActivity4);
            _flow.SubtractActivity5.A = (decimal)10m;
            _flow.SubtractActivity5.B = (decimal)5m;
            _flow.SubtractActivity5.Comment = @"";
            _flow.SubtractActivity5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_subtract.png";
            _flow.SubtractActivity5.Name = @"Subtract5";
            _flow.AddActivity4.A = (decimal)0m;
            _flow.AddActivity4.B = (decimal)0m;
            _flow.AddActivity4.Comment = @"";
            _flow.AddActivity4.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_add.png";
            _flow.AddActivity4.Name = @"Add4";
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("B");
            VTDBaseGetter binding_getter16 = new VTDObjectGetter(pi31);
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("B");
            VTDBaseSetter binding_setter16 = new VTDObjectSetter(pi32);
            bind_dir16 = new BindDirection(this.DataCursorActivity14,binding_getter16,binding_setter16,BindTargetType.ToInProperty);
            _flow.AddActivity4.InDirections.Add(bind_dir16);
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("A");
            VTDBaseGetter binding_getter17 = new VTDObjectGetter(pi33);
            VTDPropertyInfoBase pi34 = new VTDPropertyInfoBase("A");
            VTDBaseSetter binding_setter17 = new VTDObjectSetter(pi34);
            bind_dir17 = new BindDirection(this.DataCursorActivity14,binding_getter17,binding_setter17,BindTargetType.ToInProperty);
            _flow.AddActivity4.InDirections.Add(bind_dir17);
            VTDPropertyInfoBase pi35 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter18 = new VTDObjectGetter(pi35);
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("Result");
            VTDBaseSetter binding_setter18 = new VTDCheckpointSetter(XmlTypeCode.Decimal);
            bind_dir18 = new BindDirection(this.DataCursorActivity15,binding_getter18,binding_setter18,BindTargetType.ToInProperty);
            set_AddActivity4_checkpoints(_flow.AddActivity4);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    